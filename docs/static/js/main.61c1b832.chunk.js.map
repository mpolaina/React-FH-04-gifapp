{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFecthGifs","GifApp","ReactDOM","render","document","getElementById"],"mappings":"+JAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCJDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAAAC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAKlB,SACC,uBACGO,KAAK,OACLC,MAAQT,EACRU,SAjBkB,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAUH,GAFvF,+CAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAU,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE7B,OACI,qBAAKc,UAAU,MAAf,SACI,sBAAKA,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,qBAAKI,UAAU,iBAAf,SACI,mBAAGA,UAAU,OAAb,SAAsBJ,YCL7BO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACPxB,EAASC,GACJtB,MAAM,SAAA8C,GACHF,EAAS,CACLf,KAAMiB,EACNJ,SAAS,SAGtB,CAACpB,IAEGqB,EDd2BI,CAAczB,GAAlCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,yCAAd,SAAyDhB,IAEvDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,oEAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEO3Be,EAxBA,WAAO,IAAD,EAGmBxC,mBAAS,CAAC,KAH7B,mBAGVQ,EAHU,KAGET,EAHF,KAKjB,OACI,sBAAK+B,UAAU,YAAf,UACA,wCAEA,cAAC,EAAD,CACI/B,cAAgBA,IAGpB,6BAEIS,EAAWe,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,MCZ/B2B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BvD,M","file":"static/js/main.61c1b832.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setcategories }) => {\n    \n    const [inputValue, setInputValue] = useState('')\n    \n    const handleInputChange = e => { \n        setInputValue(e.target.value)\n    }\n    \n    const handleSubmit = e => { \n        e.preventDefault();\n        if( inputValue.trim().length > 2 ){\n            setcategories( categories => [ inputValue, ...categories ] )\n            setInputValue('')\n        }\n    }\n    \n    return (\n        <form onSubmit={ handleSubmit }>\n         <input\n            type=\"text\"\n            value={ inputValue }\n            onChange={ handleInputChange }\n         />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setcategories: PropTypes.func.isRequired\n}\n\n\n\n","\nexport const getGifs = async ( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?api_key=m6y0jUxGLNxtSgUQSOOySmmWWkBp0hq9&q=${ encodeURI(category) }&limit=10&offset=&rating=g&lang=es`\n    const resp = await fetch( url )\n    const { data } = await resp.json()\n    \n    const gifs = data.map( img => {\n        // de cada img retornamos un objeto con las siguientes propiedades\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    \n    return gifs\n    \n}","import React from 'react'\n\nexport const GifItem = ({ title, url }) => {\n    \n    return (\n        <div className=\"col\">\n            <div className=\"card animate__animated animate__fadeIn\">\n                <img src={ url } alt={ title }/>\n                <div className=\"card-body py-2\">\n                    <p className=\"mb-0\">{ title }</p>\n                </div>    \n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFecthGifs } from '../hooks/useFetchGifs'\nimport { GifItem } from './GifItem'\n\nexport const GifGrid = ({ category }) => {\n     \n    const { data: images, loading } = useFecthGifs( category )\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn mt-3\">{ category }</h3>\n            \n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n            \n            <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4 mb-3\">\n                    \n                    { \n                        images.map( img => (\n                            \n                            <GifItem \n                                key={ img.id}\n                                { ...img }\n                            />\n                        ))\n                    }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFecthGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n    \n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                }) \n            })\n    }, [category])\n    \n    return state\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nconst GifApp = () => {\n    \n    \n    const [categories, setcategories] = useState([''])\n    \n    return ( \n        <div className=\"container\">\n        <h2>GifApp</h2>\n        \n        <AddCategory\n            setcategories={ setcategories }\n        />\n        \n        <ol>\n            {\n            categories.map( category => (  \n                <GifGrid key={ category } category={ category }/>\n            ))}\n        </ol>\n        \n        </div>\n     );\n}\n \nexport default GifApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport GifApp from './GifApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}